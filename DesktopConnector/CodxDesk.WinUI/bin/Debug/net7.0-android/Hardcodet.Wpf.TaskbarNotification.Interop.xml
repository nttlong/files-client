<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hardcodet.Wpf.TaskbarNotification.Interop</name>
    </assembly>
    <members>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi">
            <summary>
            Win32 API imports.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)">
            <summary>
            Creates, updates or deletes the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.CreateWindowEx(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the helper window that receives messages from the taskar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.DefWindowProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes a default windows procedure.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.RegisterClass(Hardcodet.Wpf.TaskbarNotification.Interop.WindowClass@)">
            <summary>
            Registers the helper window class.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.RegisterWindowMessage(System.String)">
            <summary>
            Registers a listener for a window message.
            </summary>
            <param name="lpString"></param>
            <returns>uint</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.DestroyWindow(System.IntPtr)">
            <summary>
            Used to destroy the hidden helper window that receives messages from the
            taskbar icon.
            </summary>
            <param name="hWnd"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.SetForegroundWindow(System.IntPtr)">
            <summary>
            Gives focus to a given window.
            </summary>
            <param name="hWnd"></param>
            <returns>bool</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.GetDoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds that can elapse between a
            first click and a second click for the OS to consider the
            mouse action a double-click.
            </summary>
            <returns>The maximum amount of time, in milliseconds, that can
            elapse between a first click and a second click for the OS to
            consider the mouse action a double-click.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.GetPhysicalCursorPos(Hardcodet.Wpf.TaskbarNotification.Interop.Point@)">
            <summary>
            Gets the screen coordinates of the current mouse position.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags">
            <summary>
            Flags that define the icon that is shown on a balloon
            tooltip.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Info">
            <summary>
            An information icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Warning">
            <summary>
            A warning icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Error">
            <summary>
            An error icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.User">
            <summary>
            Windows XP Service Pack 2 (SP2) and later.
            Use a custom icon as the title icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.NoSound">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.
            Do not play the associated sound. Applies only to balloon ToolTips.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.LargeIcon">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The large version
            of the icon should be used as the balloon icon. This corresponds to the
            icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set,
            the icon with dimensions XM_CXSMICON x SM_CYSMICON is used.<br/>
            - This flag can be used with all stock icons.<br/>
            - Applications that use older customized icons (NIIF_USER with hIcon) must
              provide a new SM_CXICON x SM_CYICON version in the tray icon (hIcon). These
              icons are scaled down when they are displayed in the System Tray or
              System Control Area (SCA).<br/>
            - New customized icons (NIIF_USER with hBalloonIcon) must supply an
              SM_CXICON x SM_CYICON version in the supplied icon (hBalloonIcon).
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.RespectQuietTime">
            <summary>
            Windows 7 and later.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers">
            <summary>
            Indicates which members of a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> structure
            were set, and thus contain valid data or provide additional information
            to the ToolTip as to how it should display.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Message">
            <summary>
            The message ID is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Icon">
            <summary>
            The notification icon is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Tip">
            <summary>
            The tooltip is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.State">
            <summary>
            State information (<see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconState"/>) is set. This
            applies to both <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconState"/> and
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Info">
            <summary>
            The balloon ToolTip is set. Accordingly, the following
            members are set: <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonText"/>,
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle"/>, <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonFlags"/>,
            and <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.VersionOrTimeout"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Realtime">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. If the ToolTip
            cannot be displayed immediately, discard it.<br/>
            Use this flag for ToolTips that represent real-time information which
            would be meaningless or misleading if displayed at a later time.
            For example, a message that states "Your telephone is ringing."<br/>
            This modifies and must be combined with the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Info"/> flag.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.UseLegacyToolTips">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later.
            Use the standard ToolTip. Normally, when uVersion is set
            to NOTIFYICON_VERSION_4, the standard ToolTip is replaced
            by the application-drawn pop-up user interface (UI).
            If the application wants to show the standard tooltip
            in that case, regardless of whether the on-hover UI is showing,
            it can specify NIF_SHOWTIP to indicate the standard tooltip
            should still be shown.<br/>
            Note that the NIF_SHOWTIP flag is effective until the next call 
            to Shell_NotifyIcon.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconState">
            <summary>
            The state of the icon - can be set to
            hide the icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Visible">
            <summary>
            The icon is visible.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Hidden">
            <summary>
            Hide the icon.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent">
            <summary>
            Event flags for clicked events.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.MouseMove">
            <summary>
            The mouse was moved withing the
            taskbar icon's area.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconRightMouseDown">
            <summary>
            The right mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconLeftMouseDown">
            <summary>
            The left mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconRightMouseUp">
            <summary>
            The right mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconLeftMouseUp">
            <summary>
            The left mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconMiddleMouseDown">
            <summary>
            The middle mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconMiddleMouseUp">
            <summary>
            The middle mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconDoubleClick">
            <summary>
            The taskbar icon was double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.BalloonToolTipClicked">
            <summary>
            The balloon tip was clicked.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand">
            <summary>
            Main operations performed on the
            <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Add">
            <summary>
            The taskbar icon is being created.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Modify">
            <summary>
            The settings of the taskbar icon are being updated.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Delete">
            <summary>
            The taskbar icon is deleted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetFocus">
            <summary>
            Focus is returned to the taskbar icon. Currently not in use.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetVersion">
            <summary>
            Shell32.dll version 5.0 and later only. Instructs the taskbar
            to behave according to the version number specified in the 
            uVersion member of the structure pointed to by lpdata.
            This message allows you to specify whether you want the version
            5.0 behavior found on Microsoft Windows 2000 systems, or the
            behavior found on earlier Shell versions. The default value for
            uVersion is zero, indicating that the original Windows 95 notify
            icon behavior should be used.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData">
            <summary>
            A struct that is submitted in order to configure
            the taskbar icon. Provides various members that
            can be configured partially, according to the
            values of the <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers"/>
            that were defined.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.WindowHandle">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the
            taskbar status area. The Shell uses hWnd and uID to identify which icon to operate on
            when Shell_NotifyIcon is invoked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.TaskbarIconId">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify
            which icon to operate on when Shell_NotifyIcon is invoked. You can have multiple icons
            associated with a single hWnd by assigning each a different uID. This feature, however
            is currently not used.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.ValidMembers">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be
            a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CallbackMessageId">
            <summary>
            Application-defined message identifier. The system uses this identifier to send
            notifications to the window identified in hWnd.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconHandle">
            <summary>
            A handle to the icon that should be displayed. Just
            <c>Icon.Handle</c>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.ToolTipText">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including
            the terminating NULL. For Version 5.0 and later, szTip can have a maximum of
            128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconState">
            <summary>
            State of the icon. Remember to also set the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified.
            For example, setting this member to <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Hidden"/>
            causes only the item's hidden
            state to be retrieved.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonText">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters.
            To remove the ToolTip, set the NIF_INFO flag in uFlags and set szInfo to an empty string.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.VersionOrTimeout">
            <summary>
            Mainly used to set the version when <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> is invoked
            with <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetVersion"/>. However, for legacy operations,
            the same member is also used to set timeouts for balloon ToolTips.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface
            above the text. It can have a maximum of 63 characters.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonFlags">
            <summary>
            Adds an icon to a balloon ToolTip, which is placed to the left of the title. If the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle"/> member is zero-length, the icon is not shown.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.TaskbarIconGuid">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.<br/>
            - Windows 7 and later: A registered GUID that identifies the icon.
              This value overrides uID and is the recommended method of identifying the icon.<br/>
            - Windows XP through Windows Vista: Reserved.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CustomBalloonIconHandle">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The handle of a customized
            balloon icon provided by the application that should be used independently
            of the tray icon. If this member is non-NULL and the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.User"/>
            flag is set, this icon is used as the balloon icon.<br/>
            If this member is NULL, the legacy behavior is carried out.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CreateDefault(System.IntPtr,System.String)">
            <summary>
            Creates a default data structure that provides
            a hidden taskbar icon without the icon being set.
            </summary>
            <param name="handle"></param>
            <returns>NotifyIconData</returns>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.Point">
            <summary>
            Win API struct providing coordinates for a single point.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowProcedureHandler">
            <summary>
            Callback delegate which is used by the Windows API to
            submit window messages.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowClass">
            <summary>
            Win API WNDCLASS struct - represents a single window.
            Used to receive window messages.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages">
            <summary>
            This enum defines the windows messages we respond to.
            See more on Windows messages <a href="https://docs.microsoft.com/en-us/windows/win32/learnwin32/window-messages">here</a>
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_CONTEXTMENU">
             <summary>
             Notifies a window that the user clicked the right mouse button (right-clicked) in the window.
             See <a href="https://docs.microsoft.com/en-us/windows/win32/menurc/wm-contextmenu">WM_CONTEXTMENU message</a>
            
             In case of a notify icon:
             If a user selects a notify icon's shortcut menu with the keyboard, the Shell now sends the associated application a WM_CONTEXTMENU message. Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
             See <a href="https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shell_notifyiconw">Shell_NotifyIcon function</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_MOUSEMOVE">
             <summary>
             Posted to a window when the cursor moves.
             If the mouse is not captured, the message is posted to the window that contains the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mousemove">WM_MOUSEMOVE message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_LBUTTONDOWN">
             <summary>
             Posted when the user presses the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondown">WM_LBUTTONDOWN message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_LBUTTONUP">
             <summary>
             Posted when the user releases the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttonup">WM_LBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_LBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the left mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttondblclk">WM_LBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_RBUTTONDOWN">
             <summary>
             Posted when the user presses the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttondown">WM_RBUTTONDOWN message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_RBUTTONUP">
             <summary>
             Posted when the user releases the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttonup">WM_RBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_RBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the right mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttondblclk">WM_RBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_MBUTTONDOWN">
             <summary>
             Posted when the user presses the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttondown">WM_MBUTTONDOWN message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_MBUTTONUP">
             <summary>
             Posted when the user releases the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttonup">WM_MBUTTONUP message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_MBUTTONDBLCLK">
             <summary>
             Posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window.
             If the mouse is not captured, the message is posted to the window beneath the cursor.
             Otherwise, the message is posted to the window that has captured the mouse.
            
             See <a href="https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttondblclk">WM_MBUTTONDBLCLK message</a>
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_DPICHANGED">
            <summary>
            Sent when the effective dots per inch (dpi) for a window has changed.
            The DPI is the scale factor for a window.
            There are multiple events that can cause the DPI to change.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.WM_USER">
            <summary>
            Used to define private messages for use by private window classes, usually of the form WM_USER+x, where x is an integer value.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_SELECT">
            <summary>
            This message is only send when using NOTIFYICON_VERSION_4, the Shell now sends the associated application an NIN_SELECT notification.
            Send when a notify icon is activated with mouse or ENTER key.
            Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_KEYSELECT">
            <summary>
            This message is only send when using NOTIFYICON_VERSION_4, the Shell now sends the associated application an NIN_SELECT notification.
            Send when a notify icon is activated with SPACEBAR or ENTER key.
            Earlier versions send WM_RBUTTONDOWN and WM_RBUTTONUP messages.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_BALLOONSHOW">
            <summary>
            Sent when the balloon is shown (balloons are queued).
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_BALLOONHIDE">
             <summary>
             Sent when the balloon disappears. For example, when the icon is deleted.
             This message is not sent if the balloon is dismissed because of a timeout or if the user clicks the mouse.
            
             As of Windows 7, NIN_BALLOONHIDE is also sent when a notification with the NIIF_RESPECT_QUIET_TIME flag set attempts to display during quiet time (a user's first hour on a new computer).
             In that case, the balloon is never displayed at all.
             </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_BALLOONTIMEOUT">
            <summary>
            Sent when the balloon is dismissed because of a timeout.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_BALLOONUSERCLICK">
            <summary>
            Sent when the balloon is dismissed because the user clicked the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_POPUPOPEN">
            <summary>
            Sent when the user hovers the cursor over an icon to indicate that the richer pop-up UI should be used in place of a standard textual tooltip.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsMessages.NIN_POPUPCLOSE">
            <summary>
            Sent when a cursor no longer hovers over an icon to indicate that the rich pop-up UI should be closed.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink">
            <summary>
            Receives messages from the taskbar icon through
            window messages of an underlying helper window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CallbackMessageId">
            <summary>
            The ID of messages that are received from the the
            taskbar icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.taskbarRestartMessageId">
            <summary>
            The ID of the message that is being received if the
            taskbar is (re)started.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.isDoubleClick">
            <summary>
            Used to track whether a mouse-up event is just
            the aftermath of a double-click and therefore needs
            to be suppressed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.messageHandler">
            <summary>
            A delegate that processes messages of the hidden
            native window that receives window messages. Storing
            this reference makes sure we don't loose our reference
            to the message window.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.WindowId">
            <summary>
            Window class ID.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.MessageWindowHandle">
            <summary>
            Handle for the message window.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Version">
            <summary>
            The version of the underlying icon. Defines how
            incoming messages are interpreted.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.ChangeToolTipStateRequest">
            <summary>
            The custom tooltip should be closed or hidden.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.MouseEventReceived">
            <summary>
            Fired in case the user clicked or moved within
            the taskbar icon area.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.BalloonToolTipChanged">
            <summary>
            Fired if a balloon ToolTip was either displayed
            or closed (indicated by the boolean flag).
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.TaskbarCreated">
            <summary>
            Fired if the taskbar was created or restarted. Requires the taskbar
            icon to be reset.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.#ctor">
            <summary>
            Creates a new message sink that receives message from
            a given taskbar icon.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CreateEmpty">
            <summary>
            Creates a dummy instance that provides an empty
            pointer rather than a real window handler.<br/>
            Used at design time.
            </summary>
            <returns>WindowMessageSink</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CreateMessageWindow">
            <summary>
            Creates the helper message window that is used
            to receive messages from the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.OnWindowMessageReceived(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback method that receives messages from the taskbar area.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.ProcessWindowMessage(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Processes incoming system messages.
            </summary>
            <param name="msg">Callback ID.</param>
            <param name="wParam">If the version is <see cref="!:NotifyIconVersion.Vista"/>
            or higher, this parameter can be used to resolve mouse coordinates.
            Currently not in use.</param>
            <param name="lParam">Provides information about the event.</param>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructor in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose(System.Boolean)">
            <summary>
            Removes the windows hook that receives window
            messages and closes the underlying helper window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsTrayIcon.messageSink">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsTrayIcon.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowsTrayIcon.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <param name="flags">Defines which members of the <paramref name="data"/>
            structure are set.</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
    </members>
</doc>
